<Page
    x:Class="ContosoCookbook.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:ContosoCookbook"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">

    <Grid Name="LayoutRoot">
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="VisualStateGroup">
                <VisualState x:Name="Wide">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="800"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="First.(Grid.Row)" Value="0"/>
                        <Setter Target="First.(Grid.Column)" Value="0"/>
                        <Setter Target="Second.(Grid.Row)" Value="0"/>
                        <Setter Target="Second.(Grid.Column)" Value="1"/>
                        <Setter Target="Third.(Grid.Row)" Value="0"/>
                        <Setter Target="Third.(Grid.Column)" Value="2"/>

                        <Setter Target="First.(Grid.ColumnSpan)" Value="1"/>
                        <Setter Target="Second.(Grid.ColumnSpan)" Value="1"/>
                        <Setter Target="Third.(Grid.ColumnSpan)" Value="1"/>
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Narrow">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0"/>
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="First.(Grid.Row)" Value="0"/>
                        <Setter Target="First.(Grid.Column)" Value="0"/>
                        <Setter Target="Second.(Grid.Row)" Value="1"/>
                        <Setter Target="Second.(Grid.Column)" Value="0"/>
                        <Setter Target="Third.(Grid.Row)" Value="2"/>
                        <Setter Target="Third.(Grid.Column)" Value="0"/>

                        <Setter Target="First.(Grid.ColumnSpan)" Value="3"/>
                        <Setter Target="Second.(Grid.ColumnSpan)" Value="3"/>
                        <Setter Target="Third.(Grid.ColumnSpan)" Value="3"/>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <ScrollViewer Grid.Row="1">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <StackPanel Name="First" Margin="20, 20, 0, 0">
                    <Image Source="Assets/neo-cartoon.jpg" HorizontalAlignment="Left"/>
                    <TextBlock>Information on my cat, Mr.Tibbles</TextBlock>
                </StackPanel>
                <StackPanel Name="Second" Grid.Row="1" Margin="20, 20, 0, 0">
                    <TextBlock TextWrapping="Wrap">
                        In this lesson we will cover a bit on adaptive layout. This takes what was covered in the previous lesson, talked about the nuts and bolts of actually using the Visual State Manager and AdapativeTriggers to change attributes of objects in XAML based on screen size, to a higher level. Adaptive layout is critical to understanding the Universal Windows Platform story, where we build one code base and we can use it across multiple form factors. Here is a creative example that illustrates this, found on “Wintellect's Blog” by Jeff Prosise, who wrote how 'To Build Adaptive UIs in Windows 10'.http://bit.do/adaptive-ui.This lesson is based on Jeff’s “Contoso Cookbook” example.
                    </TextBlock>
                </StackPanel>
                <StackPanel Name="Third" Grid.Row="2" Margin="20, 20, 0, 0">
                    <TextBlock TextWrapping="Wrap">
                        In this lesson we will cover a bit on adaptive layout. This takes what was covered in the previous lesson, talked about the nuts and bolts of actually using the Visual State Manager and AdapativeTriggers to change attributes of objects in XAML based on screen size, to a higher level. Adaptive layout is critical to understanding the Universal Windows Platform story, where we build one code base and we can use it across multiple form factors. Here is a creative example that illustrates this, found on “Wintellect's Blog” by Jeff Prosise, who wrote how 'To Build Adaptive UIs in Windows 10'.http://bit.do/adaptive-ui.This lesson is based on Jeff’s “Contoso Cookbook” example.
                    </TextBlock>
                </StackPanel>
            </Grid>
        </ScrollViewer>
    </Grid>
</Page>
